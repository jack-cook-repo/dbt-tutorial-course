name: Release-Deployment CI

on:
  release:
    types: [created]

jobs:

  lint:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        python-version: [ 3.9 ]
        os: [ ubuntu-latest ]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          pip install -U pip setuptools
          pip install -r dev-requirements.txt
          pip uninstall -y charset-normalizer
      - name: Install the package
        run: |
          python setup.py install
      - name: Type checking (Mypy)
        run: |
          mypy charset_normalizer
      - name: Import sorting check (isort)
        run: |
          isort --check charset_normalizer
      - name: Code format (Black)
        run: |
          black --check --diff --target-version=py35 charset_normalizer
      - name: Style guide enforcement (Flake8)
        run: |
          flake8 charset_normalizer

  tests:
    runs-on: ${{ matrix.os }}
    needs:
      - lint

    strategy:
      fail-fast: false
      matrix:
        python-version: [ 3.5, 3.6, 3.7, 3.8, 3.9, "3.10" ]
        os: [ ubuntu-latest ]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          pip install -U pip setuptools
          pip install -r dev-requirements.txt
          pip uninstall -y charset-normalizer
      - name: Install the package
        run: |
          python setup.py install
      - name: Run tests
        run: |
          pytest

  detection_coverage:
    runs-on: ${{ matrix.os }}
    needs:
      - tests

    strategy:
      fail-fast: false
      matrix:
        python-version: [ 3.9, "3.10" ]
        os: [ ubuntu-latest ]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          pip install -U pip setuptools
          pip install -r dev-requirements.txt
          pip uninstall -y charset-normalizer
      - name: Install the package
        run: |
          python setup.py install
      - name: Clone the complete dataset
        run: |
          git clone https://github.com/Ousret/char-dataset.git
      - name: Coverage WITH preemptive
        run: |
          python ./bin/coverage.py --coverage 97 --with-preemptive
      - name: Coverage WITHOUT preemptive
        run: |
          python ./bin/coverage.py --coverage 95
      - name: BC Coverage (With Chardet)
        run: |
          python ./bin/bc.py --coverage 80

  integration:
    runs-on: ${{ matrix.os }}
    needs:
      - detection_coverage
    strategy:
      fail-fast: false
      matrix:
        python-version: [ 3.9, "3.10" ]
        os: [ ubuntu-latest ]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          pip install -U pip setuptools
          pip install -r dev-requirements.txt
      - name: Remove Chardet & Charset-Normalizer
        run: |
          pip uninstall -y chardet
          pip uninstall -y charset-normalizer
      - name: Install the package
        run: |
          python setup.py install
      - name: Clone the complete dataset
        run: |
          git clone https://github.com/Ousret/char-dataset.git
      - name: Start the Flask server
        run: |
          python ./bin/serve.py &
      - name: Integration Tests with Requests
        run: |
          python ./bin/integration.py
  deploy:

    runs-on: ubuntu-latest
    needs:
      - integration

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine
    - name: Build and publish
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        python setup.py sdist bdist_wheel
        twine upload dist/*
